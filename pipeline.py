import backend
"""
Load the raw data from file.
Slice the first 512 APIs from each sample.
Create a generator function that will return one sample and its label.
"""

class Pipeline:

    def __init__(self):
        self.load_data()
        self.make_data_generator()

    def load_data(self):
        """ Wraper for backend module. """
        self.raw_data = backend.load_data(backend.DATA_DIR)
        self.trimmed_APIs = backend.trim_data(self.raw_data, mode='first')
        self.labels = backend.get_labels(self.raw_data)

        self.data = zip(self.trimmed_APIs, self.labels)

    def make_data_generator(self):
        def make_data_gen():
            for d in self.data:
                yield d
        self.generator = make_data_gen()

    def get_next_data_item(self):
        """
        Returns a tuple of sample, label pair.
        Sample and label are both lists.
        Returns None when pipeline is empty
        """
        return next(self.generator, None)

    def get_next_data_items(self, num_items):
        """
        Returns a list of tuples.
        See get_next_data_item for details.
        """
        item_buffer = []
        for i in range(num_items):
            item_buffer.append(self.get_next_data_item())
        return item_buffer
