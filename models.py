""" Test different word embeddings on the malware data. """
from tensorflow.keras import Sequential
from tensorflow.keras.layers import TextVectorization, GlobalAveragePooling1D, Dense, LSTM, GRU, Bidirectional

def train_vectorization_layer(corpus):
    vectorize_layer = TextVectorization(standardize="lower", output_mode='int')
    vectorize_layer.adapt(corpus)
    return vectorize_layer

def simple_embedding_model(number_of_outputs):
    model = Sequential(name="SEM")

    model.add(GlobalAveragePooling1D())

    model.add(Dense(number_of_outputs, activation="sigmoid"))

    return model

def multilayer_perceptron_model(number_of_outputs):
    model = Sequential(name="MLP")

    model.add(GlobalAveragePooling1D())

    model.add(Dense(64, activation="relu"))

    model.add(Dense(number_of_outputs, activation="sigmoid"))

    return model

def lstm_model(number_of_outputs, batch_size, n_timesteps, n_features):
    model = Sequential(name="LSTM")

    model.add(LSTM(64, batch_input_shape=(batch_size, n_timesteps, n_features)))

    model.add(Dense(64, activation="relu"))

    model.add(Dense(number_of_outputs, activation="sigmoid"))

    return model

def gru_model(number_of_outputs, batch_size, n_timesteps, n_features):
    model = Sequential(name="GRU")

    model.add(GRU(64, batch_input_shape=(batch_size, n_timesteps, n_features)))

    model.add(Dense(64, activation="relu"))

    model.add(Dense(number_of_outputs, activation="sigmoid"))

    return model

def bi_lstm_model(number_of_outputs, batch_size, n_timesteps, n_features):
    model = Sequential(name="BiLSTM")

    model.add(Bidirectional(LSTM(64, batch_input_shape=(batch_size, n_timesteps, n_features))))

    model.add(Dense(64, activation="relu"))

    model.add(Dense(number_of_outputs, activation="sigmoid"))

    return model

def bi_gru_model(number_of_outputs, batch_size, n_timesteps, n_features):
    model = Sequential(name="BiGRU")

    model.add(Bidirectional(GRU(64, batch_input_shape=(batch_size, n_timesteps, n_features))))

    model.add(Dense(64, activation="relu"))

    model.add(Dense(number_of_outputs, activation="sigmoid"))

    return model
