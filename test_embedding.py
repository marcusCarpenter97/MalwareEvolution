import numpy as np
import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Embedding

class AdaptiveEmbedding(tf.keras.initializers.Initializer):

    def __init__(self, old_weights, minval=-0.05, maxval=0.05):
        self.minval = minval
        self.maxval = maxval
        self.old_weights = old_weights

        self.emb_dim = 16

    def __call__(self, shape, dtype=None, **kwargs):
        new_weights = tf.random.uniform(shape, minval=self.minval, maxval=self.maxval) # Return a tensor of shape containing the weights.
        new_weights[0:self.old_weights[1], 0:self.emb_dim] = self.old_weights

    def get_config(self):
        return {}  # Return dict with all variables in init method.

#old_w = tf.random.uniform((2,2))
m = Sequential()
m.add(Embedding(1, 16))
m.compile()
old_ws = m.get_weights()
print(old_ws)
print(old_ws[0].shape)

new_ws = np.random.uniform(low=-0.05,high=0.05, size=(2,16))
print(new_ws)
print(new_ws.shape)

new_ws[0:1, 0:16] = old_ws[0]
print(new_ws)

m.get_layer('embedding').set_weights([new_ws])

m_ws = m.get_weights()
print(m_ws)
